{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robotsArray","robots","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","username","App","onSearchChange","event","setState","searchField","target","value","state","this","filteredRobots","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNAYeA,EAVF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACxB,OACC,yBAAKC,UAAU,mDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,4BAAKC,GACL,2BAAIC,KCSQI,EAbE,SAAC,GAAgB,IAE3BC,EAF0B,EAAbC,OAEQC,KAAI,SAACC,GAC/B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAMV,GAAIA,GAAIU,EAAMV,GAAIC,KAAMS,EAAMT,KAAMC,MAAOQ,EAAMR,WAG1E,OACC,6BACEK,ICAWK,EATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OAAQ,2BACPC,KAAK,SACLC,YAAY,gBACZC,SAAUH,EACVV,UAAU,sCCGGc,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCLGf,EAAS,CACpB,CACER,GAAI,EACJC,KAAM,gBACNuB,SAAU,OACVtB,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNuB,SAAU,YACVtB,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNuB,SAAU,WACVtB,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNuB,SAAU,WACVtB,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNuB,SAAU,SACVtB,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNuB,SAAU,mBACVtB,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNuB,SAAU,eACVtB,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNuB,SAAU,gBACVtB,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNuB,SAAU,WACVtB,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNuB,SAAU,iBACVtB,MAAO,2BCtBIuB,G,wDA7Bd,aAAc,IAAD,8BACZ,gBAQDC,eAAiB,SAACC,GAAW,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SANrE,EAAKC,MAAQ,CACXxB,OAAQA,EACRqB,YAAa,IALH,E,qDAWJ,IAAD,EACuBI,KAAKD,MAA5BxB,EADA,EACAA,OAAQqB,EADR,EACQA,YACTK,EAAiB1B,EAAO2B,QAAO,SAAAzB,GACpC,OAAOA,EAAMT,KAAKmC,cAAcC,SAASR,EAAYO,kBAGtD,OACC,yBAAKjC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcoB,KAAKP,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlB,OAAS0B,U,GAvBNI,c,MCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f9cf5051.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({id, name, email}) => {\r\n\treturn (\r\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw shadow-5\">\r\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n\tconst robotsArray = robots.map((robot) => {\r\n\t\treturn <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robotsArray}\t\r\n   \t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (<input \r\n\t\ttype=\"search\" \r\n\t\tplaceholder=\"search robots\"\r\n\t\tonChange={searchChange}\r\n\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\r\n\t/>);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}} >\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React, {Component} from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport { robots } from '../robots'\r\nimport './App.css'\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\r\n\t\tthis.state = {\r\n\t\t\t robots: robots,\r\n\t\t\t searchField: '',\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChange = (event) => {this.setState({searchField: event.target.value})}\r\n\t\r\n\trender(){\r\n\t\tconst {robots, searchField} = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={ filteredRobots }/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App/>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}